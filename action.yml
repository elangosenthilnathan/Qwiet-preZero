name: "Qwiet-AllInOne-Scan"
description: "Perform a Qwiet preZero Scan of your GitHub Workspace"
author: "Qwiet AI"
branding:
  icon: "shield"
  color: "blue"

env:
  SHIFTLEFT_WAIT_FLAG: 'false' # Global environment variable to define wait status 

inputs:
  shiftleft-access-token: 
    description: 'Qwiet preZero Authentication Token'
    required: true
  excludeRegex:
    description: 'Regex to exclude path. Eg ".*(test|Readme).*$"'
    default: ".*(test|Readme).*$"
    required: false
  importGitHub:
    description: "Enable SARIF report generation and upload to GitHub Security. Accepted values: true or false"
    required: false
    default: "false"    
  verbose:
    description: "Enable Verbose logging. Accepted values: true or false"
    required: false
    default: "false"  
  strict:
    description: "Enable strict mode. Accepted values: true or false"
    required: false    
    default: "false"
  wait:
    description: "Enable Synchronous mode. Accepted values: true or false"
    required: false    
    default: "false" 
  timeout:
    description: "Increase timeout for larger repos. Eg 30m. Default is 15m"
    required: false    
    default: "15m"    
       
permissions:
  actions: read
  contents: read
  security-events: write

runs:
  using: "composite"
  steps:
  - name: Validate if token available
    if: inputs.shiftleft-access-token == ''
    shell: bash
    run: |
      echo "Qwiet Access Token is mandatory to use this action. Visit https://docs.shiftleft.io/sast/getting-started/overview for details."  
      exit 1

  - name: Validate if token available
    if: inputs.shiftleft-access-token != ''
    shell: bash
    run: |
      echo "SHIFTLEFT_ACCESS_TOKEN=${{ inputs.shiftleft-access-token }}" >> $GITHUB_ENV

  - name: Set Timeout flag
    shell: bash
    run: |
      echo "Timeout Value ${{ inputs.timeout }}"
      echo "${{ github.event.inputs.timeout }}"
      if [ "${{ github.event.inputs.timeout }}" != '' ]; then
        echo "SHIFTLEFT_ANALYSIS_TIMEOUT=${{ github.event.inputs.timeout }}" >> $GITHUB_ENV
      else
        echo "SHIFTLEFT_ANALYSIS_TIMEOUT=15m" >> $GITHUB_ENV
      fi

  - name: Set Wait flag
    if: inputs.importGitHub == 'true' || inputs.wait == 'true'
    shell: bash
    run: |
      if [ "${{ github.event.inputs.importGitHub }}" == 'true' || "${{ github.event.inputs.wait }}" == 'true' ]; then
        echo "SHIFTLEFT_WAIT_FLAG=true" >> $GITHUB_ENV
      else
        echo "SHIFTLEFT_WAIT_FLAG=false" >> $GITHUB_ENV
      fi    
      

  - uses: actions/checkout@v4

  - name: Check OS and Install Relevant Qwiet Binary
    shell: bash
    run: |
      if [[ "${{ runner.os }}" == "Linux" ]]; then
        curl https://cdn.shiftleft.io/download/sl > $HOME/sl && chmod a+rx $HOME/sl
        sudo mv $HOME/sl /usr/local/bin/
      elif [[ "${{ runner.os }}" == "Windows" ]]; then
        Invoke-WebRequest -Uri 'https://cdn.shiftleft.io/download/sl-latest-windows-x64.zip' -UseBasicParsing -OutFile sl-latest-windows-x64.zip
        Expand-Archive -Path sl-latest-windows-x64.zip -DestinationPath .
        $env:Path = $env:Path + ";.\sl" +  ";." 
      else
        echo "Unsupported OS: ${{ runner.os }}"
        exit 1
      fi  

  - name: preZero Static Analysis
    if: inputs.verbose == 'true'
    shell: bash
    run: |
      SHIFTLEFT_STRICT=${{ inputs.strict }} SHIFTLEFT_WAIT=${{ env.SHIFTLEFT_WAIT_FLAG }} sl analyze --verbose --analysis-timeout ${{ env.SHIFTLEFT_ANALYSIS_TIMEOUT }} --cpg-generation-timeout ${{ env.SHIFTLEFT_ANALYSIS_TIMEOUT }} --app "${GITHUB_REPOSITORY_OWNER}-${GITHUB_REPOSITORY#*/}" --tag branch=${{ github.head_ref || steps.extract_branch.outputs.branch }} --structured-output --structured-output-format JSON --structured-output-file-path QwietScan.json . -- --exclude-regex "${{ inputs.excludeRegex }}" 
    env:
      SHIFTLEFT_API_HOST: www.shiftleft.io
      SHIFTLEFT_GRPC_TELEMETRY_HOST: telemetry.shiftleft.io:443
      SHIFTLEFT_GRPC_API_HOST: api.shiftleft.io:443

  - name: preZero Static Analysis
    if: inputs.verbose == 'false'
    shell: bash
    run: |
      SHIFTLEFT_STRICT=${{ inputs.strict }} SHIFTLEFT_WAIT=${{ env.SHIFTLEFT_WAIT_FLAG }} sl analyze --analysis-timeout ${{ env.SHIFTLEFT_ANALYSIS_TIMEOUT }} --cpg-generation-timeout ${{ env.SHIFTLEFT_ANALYSIS_TIMEOUT }} --app "${GITHUB_REPOSITORY_OWNER}-${GITHUB_REPOSITORY#*/}" --tag branch=${{ github.head_ref || steps.extract_branch.outputs.branch }} --structured-output --structured-output-format JSON --structured-output-file-path QwietScan.json . -- --exclude-regex "${{ inputs.excludeRegex }}" 
    env:
      SHIFTLEFT_API_HOST: www.shiftleft.io
      SHIFTLEFT_GRPC_TELEMETRY_HOST: telemetry.shiftleft.io:443
      SHIFTLEFT_GRPC_API_HOST: api.shiftleft.io:443      
      
  - name: Generate Sarif Report
    if: inputs.importGitHub == 'true'
    shell: bash
    run: |
      sl sarif export --app "${GITHUB_REPOSITORY_OWNER}-${GITHUB_REPOSITORY#*/}" --report-file sarif.json      
      
  - name: Export Sarif Report to GitHub Code Scanning
    if: inputs.importGitHub == 'true'
    uses: github/codeql-action/upload-sarif@v3
    with:
      sarif_file: sarif.json
      category: qwiet-prezero-findings    
